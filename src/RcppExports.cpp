// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// Log_W_bar
double Log_W_bar(double zbar, double theta, double Oz2, double gamma);
RcppExport SEXP phenoecosim_Log_W_bar(SEXP zbarSEXP, SEXP thetaSEXP, SEXP Oz2SEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type zbar(zbarSEXP );
        Rcpp::traits::input_parameter< double >::type theta(thetaSEXP );
        Rcpp::traits::input_parameter< double >::type Oz2(Oz2SEXP );
        Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP );
        double __result = Log_W_bar(zbar, theta, Oz2, gamma);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// W_bar
double W_bar(double zbar, double theta, double Oz2, double gamma, bool LOG);
RcppExport SEXP phenoecosim_W_bar(SEXP zbarSEXP, SEXP thetaSEXP, SEXP Oz2SEXP, SEXP gammaSEXP, SEXP LOGSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type zbar(zbarSEXP );
        Rcpp::traits::input_parameter< double >::type theta(thetaSEXP );
        Rcpp::traits::input_parameter< double >::type Oz2(Oz2SEXP );
        Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP );
        Rcpp::traits::input_parameter< bool >::type LOG(LOGSEXP );
        double __result = W_bar(zbar, theta, Oz2, gamma, LOG);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// R_bar
double R_bar(double N, double R0, double Wbar, double K, double thetaL);
RcppExport SEXP phenoecosim_R_bar(SEXP NSEXP, SEXP R0SEXP, SEXP WbarSEXP, SEXP KSEXP, SEXP thetaLSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type N(NSEXP );
        Rcpp::traits::input_parameter< double >::type R0(R0SEXP );
        Rcpp::traits::input_parameter< double >::type Wbar(WbarSEXP );
        Rcpp::traits::input_parameter< double >::type K(KSEXP );
        Rcpp::traits::input_parameter< double >::type thetaL(thetaLSEXP );
        double __result = R_bar(N, R0, Wbar, K, thetaL);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Log_R_bar
double Log_R_bar(double N, double R0, double logWbar, double K, double thetaL);
RcppExport SEXP phenoecosim_Log_R_bar(SEXP NSEXP, SEXP R0SEXP, SEXP logWbarSEXP, SEXP KSEXP, SEXP thetaLSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type N(NSEXP );
        Rcpp::traits::input_parameter< double >::type R0(R0SEXP );
        Rcpp::traits::input_parameter< double >::type logWbar(logWbarSEXP );
        Rcpp::traits::input_parameter< double >::type K(KSEXP );
        Rcpp::traits::input_parameter< double >::type thetaL(thetaLSEXP );
        double __result = Log_R_bar(N, R0, logWbar, K, thetaL);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Beta
arma::vec Beta(double gamma, double A, double B, double a, double b, double e_t, double e_plast);
RcppExport SEXP phenoecosim_Beta(SEXP gammaSEXP, SEXP ASEXP, SEXP BSEXP, SEXP aSEXP, SEXP bSEXP, SEXP e_tSEXP, SEXP e_plastSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP );
        Rcpp::traits::input_parameter< double >::type A(ASEXP );
        Rcpp::traits::input_parameter< double >::type B(BSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        Rcpp::traits::input_parameter< double >::type e_t(e_tSEXP );
        Rcpp::traits::input_parameter< double >::type e_plast(e_plastSEXP );
        arma::vec __result = Beta(gamma, A, B, a, b, e_t, e_plast);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Va
arma::mat Va(arma::vec env, arma::mat GG);
RcppExport SEXP phenoecosim_Va(SEXP envSEXP, SEXP GGSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< arma::vec >::type env(envSEXP );
        Rcpp::traits::input_parameter< arma::mat >::type GG(GGSEXP );
        arma::mat __result = Va(env, GG);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Env_shift
arma::vec Env_shift(int t, List env_args);
RcppExport SEXP phenoecosim_Env_shift(SEXP tSEXP, SEXP env_argsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type t(tSEXP );
        Rcpp::traits::input_parameter< List >::type env_args(env_argsSEXP );
        arma::vec __result = Env_shift(t, env_args);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// pdLande
arma::mat pdLande(int t, arma::rowvec X, List params, arma::mat G, List env_args);
RcppExport SEXP phenoecosim_pdLande(SEXP tSEXP, SEXP XSEXP, SEXP paramsSEXP, SEXP GSEXP, SEXP env_argsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type t(tSEXP );
        Rcpp::traits::input_parameter< arma::rowvec >::type X(XSEXP );
        Rcpp::traits::input_parameter< List >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP );
        Rcpp::traits::input_parameter< List >::type env_args(env_argsSEXP );
        arma::mat __result = pdLande(t, X, params, G, env_args);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
